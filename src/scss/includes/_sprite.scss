// SCSS variables are information about icon's compiled state, stored under its original file name
//
// .icon-home {
//   width: $icon-home-width;
// }
//
// The large array-like variables contain all information about a single icon
// $icon-home: x y offset_x offset_y width height total_width total_height image_path;
//
// At the bottom of this section, we provide information about the spritesheet itself
// $spritesheet: width height image $spritesheet-sprites;
$s-2-name: 's-2';
$s-2-x: 0px;
$s-2-y: 0px;
$s-2-offset-x: 0px;
$s-2-offset-y: 0px;
$s-2-width: 14px;
$s-2-height: 14px;
$s-2-total-width: 16px;
$s-2-total-height: 86px;
$s-2-image: '../img/sprite.png';
$s-2: (0px, 0px, 0px, 0px, 14px, 14px, 16px, 86px, '../img/sprite.png', 's-2', );
$s-3-name: 's-3';
$s-3-x: 0px;
$s-3-y: 15px;
$s-3-offset-x: 0px;
$s-3-offset-y: -15px;
$s-3-width: 16px;
$s-3-height: 14px;
$s-3-total-width: 16px;
$s-3-total-height: 86px;
$s-3-image: '../img/sprite.png';
$s-3: (0px, 15px, 0px, -15px, 16px, 14px, 16px, 86px, '../img/sprite.png', 's-3', );
$s-4-name: 's-4';
$s-4-x: 0px;
$s-4-y: 30px;
$s-4-offset-x: 0px;
$s-4-offset-y: -30px;
$s-4-width: 16px;
$s-4-height: 16px;
$s-4-total-width: 16px;
$s-4-total-height: 86px;
$s-4-image: '../img/sprite.png';
$s-4: (0px, 30px, 0px, -30px, 16px, 16px, 16px, 86px, '../img/sprite.png', 's-4', );
$s-5-name: 's-5';
$s-5-x: 0px;
$s-5-y: 47px;
$s-5-offset-x: 0px;
$s-5-offset-y: -47px;
$s-5-width: 16px;
$s-5-height: 10px;
$s-5-total-width: 16px;
$s-5-total-height: 86px;
$s-5-image: '../img/sprite.png';
$s-5: (0px, 47px, 0px, -47px, 16px, 10px, 16px, 86px, '../img/sprite.png', 's-5', );
$s-6-name: 's-6';
$s-6-x: 0px;
$s-6-y: 58px;
$s-6-offset-x: 0px;
$s-6-offset-y: -58px;
$s-6-width: 16px;
$s-6-height: 13px;
$s-6-total-width: 16px;
$s-6-total-height: 86px;
$s-6-image: '../img/sprite.png';
$s-6: (0px, 58px, 0px, -58px, 16px, 13px, 16px, 86px, '../img/sprite.png', 's-6', );
$s-7-name: 's-7';
$s-7-x: 0px;
$s-7-y: 72px;
$s-7-offset-x: 0px;
$s-7-offset-y: -72px;
$s-7-width: 14px;
$s-7-height: 14px;
$s-7-total-width: 16px;
$s-7-total-height: 86px;
$s-7-image: '../img/sprite.png';
$s-7: (0px, 72px, 0px, -72px, 14px, 14px, 16px, 86px, '../img/sprite.png', 's-7', );
$spritesheet-width: 16px;
$spritesheet-height: 86px;
$spritesheet-image: '../img/sprite.png';
$spritesheet-sprites: ($s-2, $s-3, $s-4, $s-5, $s-6, $s-7, );
$spritesheet: (16px, 86px, '../img/sprite.png', $spritesheet-sprites, );

// The provided mixins are intended to be used with the array-like variables
//
// .icon-home {
//   @include sprite-width($icon-home);
// }
//
// .icon-email {
//   @include sprite($icon-email);
// }
//
// Example usage in HTML:
//
// `display: block` sprite:
// <div class="icon-home"></div>
//
// To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:
//
// // CSS
// .icon {
//   display: inline-block;
// }
//
// // HTML
// <i class="icon icon-home"></i>
@mixin sprite-width($sprite) {
  width: nth($sprite, 5);
}

@mixin sprite-height($sprite) {
  height: nth($sprite, 6);
}

@mixin sprite-position($sprite) {
  $sprite-offset-x: nth($sprite, 3);
  $sprite-offset-y: nth($sprite, 4);
  background-position: $sprite-offset-x  $sprite-offset-y;
}

@mixin sprite-image($sprite) {
  $sprite-image: nth($sprite, 9);
  background-image: url(#{$sprite-image});
}

@mixin sprite($sprite) {
  @include sprite-image($sprite);
  @include sprite-position($sprite);
  @include sprite-width($sprite);
  @include sprite-height($sprite);
}

// The `sprites` mixin generates identical output to the CSS template
//   but can be overridden inside of SCSS
//
// @include sprites($spritesheet-sprites);
@mixin sprites($sprites) {
  @each $sprite in $sprites {
    $sprite-name: nth($sprite, 10);
    .#{$sprite-name} {
      @include sprite($sprite);
    }
  }
}
